plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

static def getDate(){
    def date = new Date()
    def formattedDate = date.format("yyyyMMddHHmm", TimeZone.getTimeZone("GMT+08:00"))
    return formattedDate
}

android {
    compileSdk rootProject.ext.compileSdkVersion

    defaultConfig {
        minSdk rootProject.ext.minSdkVersion
        targetSdkVersion 32
        consumerProguardFiles "consumer-rules.pro"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "ChatWaifu"+"_"+getDate()+".apk"
                }
            }
            buildConfigField "String","CHAT_CHPT_KEY","\"\""
            buildConfigField "String","TRANSLATE_APP_ID","\"\""
            buildConfigField "String","TRANSLATE_KEY","\"\""
        }
        debug{
            buildConfigField "String","CHAT_CHPT_KEY","${readLocalProperties("CHAT_CPT_KEY")}"
            buildConfigField "String","TRANSLATE_APP_ID","${readLocalProperties("TRANSLATE_APP_ID")}"
            buildConfigField "String","TRANSLATE_KEY","${readLocalProperties("TRANSLATE_KEY")}"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
    }

    buildFeatures {
        viewBinding true
    }
    buildFeatures {
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion = "${rootProject.ext.compose_kotlin_compiler_ext_ver}"
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {
    implementation project(":VITS")
    implementation project(":Live2D")
    implementation project(":ChatGPT")
    implementation project(":Translate")
    implementation project(":Log")
    implementation project(":Lipsync")
    implementation project(':Sherpa')
    implementation "androidx.core:core-ktx:${rootProject.ext.kotlin_ktx}"
    implementation "androidx.appcompat:appcompat:${rootProject.ext.android_appcompat}"
    implementation "com.google.android.material:material:${rootProject.ext.android_material}"
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'androidx.navigation:navigation-fragment:2.5.3'
    implementation 'androidx.navigation:navigation-ui-ktx:2.5.3'
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:${rootProject.ext.lifecycle_livedata_ktx}"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:${rootProject.ext.lifecycle_livedata_ktx}"
    implementation 'androidx.navigation:navigation-fragment-ktx:2.5.3'
    implementation 'com.belerweb:pinyin4j:2.5.0'
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.6.1"
    implementation 'androidx.lifecycle:lifecycle-runtime-compose:2.6.1'
    implementation "androidx.activity:activity-ktx:1.7.1"
    implementation 'androidx.annotation:annotation:1.5.0'
    implementation 'com.kunminx.archi:unpeek-livedata:4.4.1-beta1'

    // compose lib
    implementation platform("androidx.compose:compose-bom:${rootProject.ext.compose_bom_version}")
    implementation 'androidx.compose.ui:ui'
    implementation 'androidx.compose.ui:ui-viewbinding'
    implementation 'androidx.compose.material:material'
    implementation 'androidx.compose.material:material-icons-extended'
    implementation 'androidx.compose.material3:material3'
    implementation 'androidx.compose.material3:material3-window-size-class'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    implementation 'androidx.compose.runtime:runtime'
    implementation 'androidx.activity:activity-compose'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose'
    implementation 'androidx.compose.runtime:runtime-livedata'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'
    debugImplementation 'androidx.compose.ui:ui-tooling'

    implementation 'androidx.recyclerview:recyclerview:1.3.0'
    
    // Retrofit for network requests
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.okhttp3:okhttp:4.9.3'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.3'

    implementation 'com.google.android:flexbox:2.0.1'
    implementation "androidx.camera:camera-core:1.1.0"
    implementation "androidx.camera:camera-camera2:1.1.0"
    implementation "androidx.camera:camera-lifecycle:1.1.0"
    implementation "androidx.camera:camera-video:1.1.0"
    implementation "androidx.camera:camera-view:1.0.0-alpha32"
}

def readLocalProperties(String key) {
    Properties local = new Properties()
    String result = "\"\""
    try {
        local.load(new FileInputStream("${rootDir}/local.properties"))
        result = local.getProperty(key) ?: result
    } catch (Exception e) {
        println(e.getMessage())
        return ""
    }
    println("read local key...$key value is $result")
    return result
}
